// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function generateCalendar() {
    const calendar = document.getElementById('calendar');
    calendar.innerHTML = '';
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    daysOfWeek.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.className = 'day-header';
        dayElement.textContent = day;
        calendar.appendChild(dayElement);
    });
    
    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(currentYear, currentMonth, 1);
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    
    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const startOffset = (firstDay.getDay() || 7) - 1;
    for (let i = 0; i < startOffset; i++) {
        const empty = document.createElement('div');
        empty.className = 'day empty';
        calendar.appendChild(empty);
    }
    
    // –î–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'day';
        
        const dateKey = `${currentYear}-${currentMonth+1}-${day}`;
        const dayData = calendarData[dateKey] || {};
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formatSalesNumber = (value) => {
            if (value >= 10000) return Math.floor(value / 1000);
            return value;
        };
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        dayElement.innerHTML = `
            <div class="day-number">${day}</div>
            ${dayData.sales ? `<div class="day-sales">${formatSalesNumber(dayData.sales)}</div>` : ''}
        `;
        
        // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ - –±–µ–ª—ã–π —Ü–≤–µ—Ç —É–¥–∞–ª—è–µ—Ç –∑–∞–ª–∏–≤–∫—É
        if (dayData.color) {
            if (dayData.color === '#ffffff') {
                dayElement.style.backgroundColor = '';
            } else {
                dayElement.style.backgroundColor = dayData.color;
            }
        }
        
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
        if (dayData.functionalBorder) {
            dayElement.classList.add('functional-border');
        }
        
        // –ò–∫–æ–Ω–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if (dayData.comment) {
            const commentIcon = document.createElement('div');
            commentIcon.className = 'day-comment';
            commentIcon.textContent = 'üí¨';
            commentIcon.style.position = 'absolute';
            commentIcon.style.top = '5px';
            commentIcon.style.right = '5px';
            commentIcon.style.fontSize = '0.8em';
            dayElement.appendChild(commentIcon);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        const today = new Date();
        if (currentYear === today.getFullYear() && 
            currentMonth === today.getMonth() && 
            day === today.getDate()) {
            dayElement.classList.add('today');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        dayElement.addEventListener('click', () => handleDayClick(day));
        calendar.appendChild(dayElement);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
      "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
    document.getElementById('current-month-year').textContent = 
        `${monthNames[currentMonth]} ${currentYear}`;
    
    // –†–∞—Å—á–µ—Ç—ã
    calculateSummary();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é
function handleDayClick(day) {
    if (massColoringMode === 'fill') {
        applyFillColor(day);
    } else if (massColoringMode === 'border') {
        toggleFunctionalBorder(day);
    } else {
        openModal(day);
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal(day) {
    selectedDay = day;
    const dateKey = `${currentYear}-${currentMonth+1}-${day}`;
    const dayData = calendarData[dateKey] || {};
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–≤–æ–¥–∫–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
    originalHasFunctionalBorder = dayData.functionalBorder || false;
    originalSalesValue = dayData.functionalBorderValue || (originalHasFunctionalBorder ? dayData.sales : 0);
    
    document.getElementById('modal-day').textContent = day;
    document.getElementById('sales-input').value = dayData.sales || '';
    document.getElementById('comment-input').value = dayData.comment || '';
    
    // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
    document.querySelectorAll('.color-option').forEach(option => {
        option.classList.remove('selected');
        if (option.dataset.color === dayData.color) {
            option.classList.add('selected');
        }
    });
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–Ω—è
    document.getElementById('day-sales-percent').value = dayData.customSalesPercent || '';
    document.getElementById('day-shift-rate').value = dayData.customShiftRate || '';
    
    // –°–±—Ä–æ—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–Ω—è
    document.getElementById('day-settings').style.display = 'none';
    
    document.getElementById('modal').style.display = 'block';
    document.body.classList.add('modal-open');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è
function saveDayData() {
    const sales = parseInt(document.getElementById('sales-input').value) || 0;
    const comment = document.getElementById('comment-input').value;
    const selectedColor = document.querySelector('.color-option.selected')?.dataset.color;
    const customSalesPercent = document.getElementById('day-sales-percent').value ? 
        parseFloat(document.getElementById('day-sales-percent').value) : null;
    const customShiftRate = document.getElementById('day-shift-rate').value ? 
        parseInt(document.getElementById('day-shift-rate').value) : null;
    
    const dateKey = `${currentYear}-${currentMonth+1}-${selectedDay}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–≤–æ–¥–∫—É
    const shouldKeepFunctionalBorder = originalHasFunctionalBorder && sales === originalSalesValue;
    
    calendarData[dateKey] = {
        sales: sales,
        comment: comment,
        color: selectedColor,
        customSalesPercent: customSalesPercent,
        customShiftRate: customShiftRate,
        functionalBorder: shouldKeepFunctionalBorder,
        functionalBorderValue: shouldKeepFunctionalBorder ? originalSalesValue : undefined
    };
    
    saveToStorage('calendarData', calendarData);
    closeModal();
    generateCalendar();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modals = [
        'modal', 'summary-modal', 'period-modal', 'settings-modal',
        'calculation-variants-modal', 'export-modal', 'import-modal',
        'help-modal', 'template-selector-modal', 'add-template-modal'
    ];
    
    modals.forEach(modalId => {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
        }
    });
    
    document.body.classList.remove('modal-open');
}

// –†–∞—Å—á–µ—Ç—ã
function calculateSummary() {
    const currentTemplate = appSettings.templates.find(t => t.id === appSettings.currentTemplateId);
    const summary = calculateMonthSummary(calendarData, currentYear, currentMonth, currentTemplate.settings);
    
    document.getElementById('modal-work-days').textContent = summary.workDays;
    document.getElementById('modal-total-sales').textContent = summary.totalSales.toLocaleString();
    document.getElementById('modal-total-earned').textContent = summary.totalEarned.toLocaleString();
    document.getElementById('modal-salary').textContent = summary.salary.toLocaleString();
    document.getElementById('modal-balance').textContent = summary.balance.toLocaleString();
    document.getElementById('summary-month-year').textContent = 
        `${new Date(currentYear, currentMonth).toLocaleString('ru', { month: 'long' })} ${currentYear}`;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
function initPeriodSelector() {
    const currentYear = new Date().getFullYear();
    const yearOptions = document.getElementById('year-options');
    
    // –ì–æ–¥—ã –æ—Ç 2020 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ + 5 –ª–µ—Ç –≤–ø–µ—Ä–µ–¥
    for (let year = 2020; year <= currentYear + 5; year++) {
        const option = document.createElement('div');
        option.className = 'period-option';
        option.textContent = year;
        option.dataset.year = year;
        option.addEventListener('click', () => selectYear(year));
        yearOptions.appendChild(option);
    }
    
    // –ú–µ—Å—è—Ü—ã
    const monthOptions = document.getElementById('month-options');
    const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
      "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
    
    monthNames.forEach((month, index) => {
        const option = document.createElement('div');
        option.className = 'period-option';
        option.textContent = month;
        option.dataset.month = index;
        option.addEventListener('click', () => selectMonth(index));
        monthOptions.appendChild(option);
    });
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    document.getElementById('period-back').addEventListener('click', () => {
        document.getElementById('month-step').style.display = 'none';
        document.getElementById('year-step').style.display = 'block';
        document.getElementById('period-back').style.display = 'none';
    });
}

// –í—ã–±–æ—Ä –≥–æ–¥–∞
function selectYear(year) {
    currentYear = year;
    document.getElementById('year-step').style.display = 'none';
    document.getElementById('month-step').style.display = 'block';
    document.getElementById('period-back').style.display = 'block';
}

// –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
function selectMonth(month) {
    currentMonth = month;
    closeModal();
    generateCalendar();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    document.getElementById('prev-month').addEventListener('click', () => {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        generateCalendar();
    });
    
    document.getElementById('next-month').addEventListener('click', () => {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        generateCalendar();
    });
    
    // –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
    document.getElementById('month-year-selector').addEventListener('click', () => {
        document.getElementById('period-modal').style.display = 'block';
        document.body.classList.add('modal-open');
    });
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.querySelectorAll('.close').forEach(closeBtn => {
        closeBtn.addEventListener('click', function() {
            const modal = this.closest('.modal');
            if (modal.id === 'template-selector-modal') {
                modal.style.display = 'none';
                document.getElementById('calculation-variants-modal').style.display = 'block';
            } else {
                closeModal();
            }
        });
    });
    
    window.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            if (e.target.id === 'template-selector-modal') {
                e.target.style.display = 'none';
                document.getElementById('calculation-variants-modal').style.display = 'block';
            } else {
                closeModal();
            }
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('save-data').addEventListener('click', saveDayData);
    
    // –†–∞—Å—á–µ—Ç—ã
    document.getElementById('summary-btn').addEventListener('click', () => {
        document.getElementById('summary-modal').style.display = 'block';
        document.body.classList.add('modal-open');
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('settings-btn').addEventListener('click', () => {
        document.getElementById('settings-modal').style.display = 'block';
        document.body.classList.add('modal-open');
    });
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
    document.getElementById('calculation-variants-btn').addEventListener('click', () => {
        document.getElementById('calculation-variants-modal').style.display = 'block';
        document.body.classList.add('modal-open');
        updateSettingsUI();
    });
    
    document.getElementById('save-settings').addEventListener('click', saveSettings);
    
    // –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
    document.getElementById('export-btn').addEventListener('click', showExportModal);
    document.getElementById('import-btn').addEventListener('click', showImportModal);
    
    document.getElementById('import-file').addEventListener('change', importData);
    
    // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–∞
    document.querySelectorAll('.color-option').forEach(option => {
        option.addEventListener('click', () => {
            document.querySelectorAll('.color-option').forEach(o => o.classList.remove('selected'));
            option.classList.add('selected');
        });
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è
    document.getElementById('day-settings-btn').addEventListener('click', function() {
        const settingsPanel = document.getElementById('day-settings');
        settingsPanel.style.display = settingsPanel.style.display === 'none' ? 'block' : 'none';
    });
    
    document.getElementById('reset-day-settings').addEventListener('click', function() {
        document.getElementById('day-sales-percent').value = '';
        document.getElementById('day-shift-rate').value = '';
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    document.getElementById('select-template-btn').addEventListener('click', function() {
        showTemplateSelectorModal();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
    document.getElementById('update-btn').addEventListener('click', forceUpdate);
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('clear-data-btn').addEventListener('click', showClearDataConfirm);
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
    document.getElementById('help-btn').addEventListener('click', showHelpModal);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
    document.addEventListener('keydown', handleKeyPress);
    
    // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
    document.getElementById('copy-data-btn').addEventListener('click', copyDataToClipboard);
    document.getElementById('save-file-btn').addEventListener('click', exportData);
    document.getElementById('import-file-btn').addEventListener('click', () => {
        document.getElementById('import-file').click();
    });
    document.getElementById('import-text-btn').addEventListener('click', importFromText);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–ª–∏—Ç—Ä—ã
    document.getElementById('palette-btn').addEventListener('click', function() {
        const palettePanel = document.getElementById('palette-panel');
        const isVisible = palettePanel.style.display === 'block';
        palettePanel.style.display = isVisible ? 'none' : 'block';
        this.classList.toggle('active', !isVisible);
        
        // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ª–∏–≤–∫–∏/–æ–±–≤–æ–¥–∫–∏
        if (isVisible) {
            massColoringMode = null;
            document.querySelectorAll('.palette-tool.active').forEach(tool => {
                tool.classList.remove('active');
            });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–∞–ª–∏—Ç—Ä—ã
    document.querySelectorAll('.palette-tool.fill').forEach(tool => {
        tool.addEventListener('click', function() {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–ª–∏–≤–∫–∏
            document.querySelectorAll('.palette-tool').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            massColoringMode = 'fill';
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ–±–≤–æ–¥–∫–∏
    document.getElementById('palette-border').addEventListener('click', function() {
        document.querySelectorAll('.palette-tool').forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        massColoringMode = 'border';
    });

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    document.getElementById('add-template-modal-btn').addEventListener('click', function() {
        document.getElementById('add-template-modal').style.display = 'block';
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    document.getElementById('create-template-btn').addEventListener('click', addNewTemplate);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–æ—Ä–º—É
function loadSettingsToForm() {
    updateSelectedTemplateName();
    updateSettingsUI();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
function updateSelectedTemplateName() {
    const currentTemplate = appSettings.templates.find(t => t.id === appSettings.currentTemplateId);
    document.getElementById('selected-template-name').textContent = currentTemplate.name;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
function updateSettingsUI() {
    const templateId = appSettings.currentTemplateId;
    const template = appSettings.templates.find(t => t.id === templateId);
    
    if (!template) return;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    document.querySelectorAll('.template-settings').forEach(el => {
        el.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    if (template.type === 'percentage') {
        document.getElementById('percentage-settings').style.display = 'block';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–ü—Ä–æ—Ü–µ–Ω—Ç + —Å—Ç–∞–≤–∫–∞"
        document.getElementById('sales-percent').value = template.settings.salesPercent;
        document.getElementById('shift-rate').value = template.settings.shiftRate;
        document.getElementById('advance').value = template.settings.advance;
        document.getElementById('functional-border-value').value = template.settings.functionalBorderValue;
    } else if (template.type === 'custom') {
        document.getElementById('custom-settings').style.display = 'block';
        // –ü–æ–∫–∞ –ø—É—Å—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    const templateId = appSettings.currentTemplateId;
    const templateIndex = appSettings.templates.findIndex(t => t.id === templateId);
    
    if (templateIndex === -1) return;
    
    const oldFunctionalBorderValue = appSettings.templates[templateIndex].settings.functionalBorderValue;
    
    if (appSettings.templates[templateIndex].type === 'percentage') {
        appSettings.templates[templateIndex].settings = {
            salesPercent: parseFloat(document.getElementById('sales-percent').value),
            shiftRate: parseInt(document.getElementById('shift-rate').value),
            advance: parseInt(document.getElementById('advance').value),
            functionalBorderValue: parseInt(document.getElementById('functional-border-value').value)
        };
    }
    // –î–ª—è custom —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    
    appSettings.currentTemplateId = templateId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±–≤–æ–¥–∫–∏, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const newFunctionalBorderValue = appSettings.templates[templateIndex].settings.functionalBorderValue;
    if (oldFunctionalBorderValue !== newFunctionalBorderValue) {
        const result = updateFunctionalBorders(calendarData, newFunctionalBorderValue);
        calendarData = result.updatedData;
        if (result.updated) {
            saveToStorage('calendarData', calendarData);
            generateCalendar();
            showNotification('–ó–Ω–∞—á–µ–Ω–∏—è –æ–±–≤–æ–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }
    
    saveToStorage('appSettings', appSettings);
    closeModal();
    calculateSummary();
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
function addNewTemplate() {
    const templateName = document.getElementById('new-template-name').value.trim();
    
    if (!templateName) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞');
        return;
    }
    
    const newId = Math.max(...appSettings.templates.map(t => t.id), 0) + 1;
    const newTemplate = {
        id: newId,
        name: templateName,
        type: 'custom',
        settings: {}
    };
    
    appSettings.templates.push(newTemplate);
    appSettings.currentTemplateId = newId;
    
    saveToStorage('appSettings', appSettings);
    updateSelectedTemplateName();
    updateSettingsUI();
    document.getElementById('add-template-modal').style.display = 'none';
    showTemplateSelectorModal();
    showNotification('–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
function showTemplateSelectorModal() {
    const templateList = document.getElementById('template-list');
    templateList.innerHTML = '';
    
    appSettings.templates.forEach(template => {
        const templateElement = document.createElement('div');
        templateElement.className = 'template-item';
        templateElement.style.display = 'flex';
        templateElement.style.justifyContent = 'space-between';
        templateElement.style.alignItems = 'center';
        templateElement.style.marginBottom = '10px';
        templateElement.style.padding = '10px';
        templateElement.style.border = '1px solid #e2e8f0';
        templateElement.style.borderRadius = '5px';
        
        const templateName = document.createElement('div');
        templateName.textContent = template.name;
        templateName.style.flex = '1';
        
        const buttonsContainer = document.createElement('div');
        buttonsContainer.style.display = 'flex';
        buttonsContainer.style.gap = '5px';
        
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editButton = document.createElement('button');
        editButton.textContent = '‚úèÔ∏è';
        editButton.style.padding = '5px';
        editButton.style.border = 'none';
        editButton.style.background = 'none';
        editButton.style.cursor = 'pointer';
        editButton.onclick = (e) => {
            e.stopPropagation();
            editTemplateName(template.id);
        };
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å id=1)
        let deleteButton = null;
        if (template.id !== 1) {
            deleteButton = document.createElement('button');
            deleteButton.textContent = 'üóëÔ∏è';
            deleteButton.style.padding = '5px';
            deleteButton.style.border = 'none';
            deleteButton.style.background = 'none';
            deleteButton.style.cursor = 'pointer';
            deleteButton.onclick = (e) => {
                e.stopPropagation();
                deleteTemplate(template.id);
            };
        }
        
        buttonsContainer.appendChild(editButton);
        if (deleteButton) buttonsContainer.appendChild(deleteButton);
        
        templateElement.appendChild(templateName);
        templateElement.appendChild(buttonsContainer);
        
        templateElement.addEventListener('click', () => selectTemplate(template.id));
        templateList.appendChild(templateElement);
    });
    
    document.getElementById('template-selector-modal').style.display = 'block';
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞
function editTemplateName(templateId) {
    const template = appSettings.templates.find(t => t.id === templateId);
    if (!template) return;
    
    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:', template.name);
    if (newName && newName.trim() !== '') {
        template.name = newName.trim();
        saveToStorage('appSettings', appSettings);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateSelectedTemplateName();
        showTemplateSelectorModal();
        showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
function deleteTemplate(templateId) {
    if (templateId === 1) {
        showNotification('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?')) {
        return;
    }
    
    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —à–∞–±–ª–æ–Ω –±—ã–ª —Ç–µ–∫—É—â–∏–º, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π
    if (appSettings.currentTemplateId === templateId) {
        appSettings.currentTemplateId = 1;
    }
    
    // –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
    appSettings.templates = appSettings.templates.filter(t => t.id !== templateId);
    saveToStorage('appSettings', appSettings);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateSelectedTemplateName();
    updateSettingsUI();
    showTemplateSelectorModal();
    showNotification('–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω');
}

// –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
function selectTemplate(templateId) {
    appSettings.currentTemplateId = templateId;
    saveToStorage('appSettings', appSettings);
    updateSelectedTemplateName();
    updateSettingsUI();
    document.getElementById('template-selector-modal').style.display = 'none';
    document.getElementById('calculation-variants-modal').style.display = 'block';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
function handleKeyPress(e) {
    if (e.key === 'Escape') {
        closeModal();
    }
}
