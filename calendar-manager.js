// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function generateCalendar() {
    const calendar = document.getElementById('calendar');
    calendar.innerHTML = '';
    
    const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    daysOfWeek.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.className = 'day-header';
        dayElement.textContent = day;
        calendar.appendChild(dayElement);
    });
    
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    
    const startOffset = (firstDay.getDay() || 7) - 1;
    for (let i = 0; i < startOffset; i++) {
        const empty = document.createElement('div');
        empty.className = 'day empty';
        calendar.appendChild(empty);
    }
    
    const currentCalendarData = getCurrentCalendarData();
    
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'day';
        
        const dateKey = `${currentYear}-${currentMonth+1}-${day}`;
        const dayData = currentCalendarData[dateKey] || {};
        
        const formatSalesNumber = (value) => {
            if (value >= 10000) return Math.floor(value / 1000);
            return value;
        };
        
        dayElement.innerHTML = `
            <div class="day-number">${day}</div>
            ${dayData.sales ? `<div class="day-sales">${formatSalesNumber(dayData.sales)}</div>` : ''}
        `;
        
        if (dayData.color) {
            if (dayData.color === '#ffffff') {
                dayElement.style.backgroundColor = '';
            } else {
                dayElement.style.backgroundColor = dayData.color;
            }
        }
        
        if (dayData.functionalBorder) {
            dayElement.classList.add('functional-border');
        }
        
        if (dayData.comment) {
            const commentIcon = document.createElement('div');
            commentIcon.className = 'day-comment';
            commentIcon.textContent = 'üí¨';
            commentIcon.style.position = 'absolute';
            commentIcon.style.top = '5px';
            commentIcon.style.right = '5px';
            commentIcon.style.fontSize = '0.8em';
            dayElement.appendChild(commentIcon);
        }
        
        const today = new Date();
        if (currentYear === today.getFullYear() && 
            currentMonth === today.getMonth() && 
            day === today.getDate()) {
            dayElement.classList.add('today');
        }
        
        dayElement.addEventListener('click', () => handleDayClick(day));
        calendar.appendChild(dayElement);
    }
    
    const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
      "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
    document.getElementById('current-month-year').textContent = 
        `${monthNames[currentMonth]} ${currentYear}`;
    
    calculateSummaryDisplay();
}

// –†–∞—Å—á–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function calculateSummaryDisplay() {
    const template = getCurrentTemplate();
    const currentCalendarData = getCurrentCalendarData();
    const summary = calculateMonthlySummary(currentCalendarData, template, currentYear, currentMonth);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    document.getElementById('modal-work-days').textContent = summary.workDays;
    document.getElementById('modal-total-sales').textContent = summary.totalSales.toLocaleString();
    document.getElementById('modal-total-earned').textContent = summary.totalIncome.toLocaleString();
    document.getElementById('modal-salary').textContent = summary.finalSalary.toLocaleString();
    document.getElementById('modal-balance').textContent = summary.finalSalary.toLocaleString();
    document.getElementById('summary-month-year').textContent = 
        `${new Date(currentYear, currentMonth).toLocaleString('ru', { month: 'long' })} ${currentYear}`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é
function handleDayClick(day) {
    if (massColoringMode === 'fill') {
        applyFillColor(day);
    } else if (massColoringMode === 'border') {
        toggleFunctionalBorder(day);
    } else {
        openDayModal(day);
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±–≤–æ–¥–∫–∏
function toggleFunctionalBorder(day) {
    const dateKey = `${currentYear}-${currentMonth+1}-${day}`;
    const currentCalendarData = getCurrentCalendarData();
    let dayData = currentCalendarData[dateKey] || {};
    const template = getCurrentTemplate();
    
    if (dayData.functionalBorder) {
        // –°–Ω–∏–º–∞–µ–º –æ–±–≤–æ–¥–∫—É
        dayData.functionalBorder = false;
        dayData.functionalBorderData = undefined;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        const hasSalesPercent = template.ruleBlocks.some(block => block.type === 'salesPercent');
        const hasShiftRate = template.ruleBlocks.some(block => block.type === 'shiftRate');
        const hasHourlyRate = template.ruleBlocks.some(block => block.type === 'hourlyRate');
        
        if (hasSalesPercent) dayData.sales = 0;
        if (hasShiftRate) {
            dayData.dayShift = false;
            dayData.nightShift = false;
        }
        if (hasHourlyRate) {
            dayData.dayHours = 0;
            dayData.nightHours = 0;
        }
        
        showNotification('–û–±–≤–æ–¥–∫–∞ —Å–Ω—è—Ç–∞');
    } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–≤–æ–¥–∫—É
        dayData.functionalBorder = true;
        dayData.functionalBorderData = {...template.functionalBorderData};
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        const hasSalesPercent = template.ruleBlocks.some(block => block.type === 'salesPercent');
        const hasShiftRate = template.ruleBlocks.some(block => block.type === 'shiftRate');
        const hasHourlyRate = template.ruleBlocks.some(block => block.type === 'hourlyRate');
        
        if (hasSalesPercent) dayData.sales = template.functionalBorderData.sales;
        if (hasShiftRate) {
            dayData.dayShift = template.functionalBorderData.dayShift;
            dayData.nightShift = template.functionalBorderData.nightShift;
        }
        if (hasHourlyRate) {
            dayData.dayHours = template.functionalBorderData.dayHours;
            dayData.nightHours = template.functionalBorderData.nightHours;
        }
        
        showNotification('–û–±–≤–æ–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    currentCalendarData[dateKey] = dayData;
    saveToStorage('appSettings', appSettings);
    generateCalendar();
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ª–∏–≤–∫–∏
function applyFillColor(day) {
    const color = document.querySelector('.palette-tool.fill.active')?.dataset.color || '#ffffff';
    const dateKey = `${currentYear}-${currentMonth+1}-${day}`;
    const currentCalendarData = getCurrentCalendarData();
    let dayData = currentCalendarData[dateKey] || {};
    
    dayData.color = color;
    currentCalendarData[dateKey] = dayData;
    saveToStorage('appSettings', appSettings);
    generateCalendar();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–Ω—è
function openDayModal(day) {
    selectedDay = day;
    const dateKey = `${currentYear}-${currentMonth+1}-${day}`;
    const currentCalendarData = getCurrentCalendarData();
    const dayData = currentCalendarData[dateKey] || {};
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–û –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    originalFunctionalBorderData = dayData.functionalBorder ? {...dayData.functionalBorderData} : null;
    
    document.getElementById('modal-day').textContent = day;
    document.getElementById('comment-input').value = dayData.comment || '';
    
    document.querySelectorAll('.color-option').forEach(option => {
        option.classList.remove('selected');
        if (option.dataset.color === dayData.color) {
            option.classList.add('selected');
        }
    });
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    generateDaySettingsFields(dayData);
    
    document.getElementById('day-settings').style.display = 'none';
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ø—Ä–∞–≤–∏–ª
    generateDynamicFields(dayData);
    
    showModal('modal');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–Ω—è
function generateDaySettingsFields(dayData) {
    const daySettings = document.getElementById('day-settings');
    const settingsContent = daySettings.querySelector('.setting-group')?.parentNode || daySettings;
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const existingSettings = settingsContent.querySelectorAll('.setting-group');
    existingSettings.forEach(setting => {
        if (!setting.querySelector('#reset-day-settings')) {
            setting.remove();
        }
    });
    
    const template = getCurrentTemplate();
    const hasSalesPercent = template.ruleBlocks.some(block => block.type === 'salesPercent');
    const hasShiftRate = template.ruleBlocks.some(block => block.type === 'shiftRate');
    const hasHourlyRate = template.ruleBlocks.some(block => block.type === 'hourlyRate');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const newSettingsContainer = document.createElement('div');
    
    // –ü–æ–ª–µ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –±–ª–æ–∫)
    if (hasSalesPercent) {
        const percentGroup = document.createElement('div');
        percentGroup.className = 'setting-group';
        percentGroup.innerHTML = `
            <label>–ü—Ä–æ—Ü–µ–Ω—Ç —Å –ø—Ä–æ–¥–∞–∂ (%):</label>
            <input type="number" id="day-sales-percent" min="0" max="100" step="0.1" 
                   value="${dayData.customSalesPercent || ''}">
        `;
        newSettingsContainer.appendChild(percentGroup);
    }
    
    // –ü–æ–ª–µ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –∑–∞ —Å–º–µ–Ω—É (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –±–ª–æ–∫)
    if (hasShiftRate) {
        const shiftGroup = document.createElement('div');
        shiftGroup.className = 'setting-group';
        shiftGroup.innerHTML = `
            <label>–°—Ç–∞–≤–∫–∞ –∑–∞ —Å–º–µ–Ω—É (—Ä—É–±):</label>
            <input type="number" id="day-shift-rate" min="0" step="100" 
                   value="${dayData.customShiftRate || ''}">
        `;
        newSettingsContainer.appendChild(shiftGroup);
    }
    
    // –ü–æ–ª–µ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –∑–∞ —á–∞—Å (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –±–ª–æ–∫)
    if (hasHourlyRate) {
        const hourlyGroup = document.createElement('div');
        hourlyGroup.className = 'setting-group';
        hourlyGroup.innerHTML = `
            <label>–°—Ç–∞–≤–∫–∞ –∑–∞ —á–∞—Å (—Ä—É–±):</label>
            <input type="number" id="day-hourly-rate" min="0" step="10" 
                   value="${dayData.customHourlyRate || ''}">
        `;
        newSettingsContainer.appendChild(hourlyGroup);
    }
    
    // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–û–õ–Ø: –ë–û–ù–£–° –ò –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –í–´–ß–ï–¢ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
    const bonusGroup = document.createElement('div');
    bonusGroup.className = 'setting-group';
    bonusGroup.innerHTML = `
        <label>–ë–æ–Ω—É—Å –∑–∞ –¥–µ–Ω—å (—Ä—É–±):</label>
        <input type="number" id="day-bonus" min="0" step="100" 
               value="${dayData.bonus || ''}">
    `;
    newSettingsContainer.appendChild(bonusGroup);
    
    const deductionGroup = document.createElement('div');
    deductionGroup.className = 'setting-group';
    deductionGroup.innerHTML = `
        <label>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—á–µ—Ç –∑–∞ –¥–µ–Ω—å (—Ä—É–±):</label>
        <input type="number" id="day-deduction" min="0" step="100" 
               value="${dayData.fixedDeduction || ''}">
    `;
    newSettingsContainer.appendChild(deductionGroup);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!hasSalesPercent && !hasShiftRate && !hasHourlyRate) {
        const message = document.createElement('div');
        message.style.padding = '10px';
        message.style.textAlign = 'center';
        message.style.color = '#666';
        message.textContent = '–î–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫–∏ –ø—Ä–∞–≤–∏–ª –≤ —à–∞–±–ª–æ–Ω –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–Ω—è';
        newSettingsContainer.appendChild(message);
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π —Å–±—Ä–æ—Å–∞
    const resetButton = settingsContent.querySelector('#reset-day-settings');
    if (resetButton) {
        settingsContent.insertBefore(newSettingsContainer, resetButton);
    } else {
        settingsContent.appendChild(newSettingsContainer);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ø—Ä–∞–≤–∏–ª
function generateDynamicFields(dayData) {
    const dynamicFields = document.getElementById('dynamic-fields');
    dynamicFields.innerHTML = '';
    
    const template = getCurrentTemplate();
    const hasSalesPercent = template.ruleBlocks.some(block => block.type === 'salesPercent');
    const hasShiftRate = template.ruleBlocks.some(block => block.type === 'shiftRate');
    const hasHourlyRate = template.ruleBlocks.some(block => block.type === 'hourlyRate');
    
    // –ü–æ–ª–µ –ø—Ä–æ–¥–∞–∂ (–µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂)
    if (hasSalesPercent) {
        const salesGroup = document.createElement('div');
        salesGroup.className = 'setting-group';
        salesGroup.innerHTML = `
            <label>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (—Ä—É–±):</label>
            <input type="number" id="sales-input" value="${dayData.sales || ''}" min="0" step="100">
        `;
        dynamicFields.appendChild(salesGroup);
    }
    
    // –ü–æ–ª—è —Å–º–µ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫ —Å—Ç–∞–≤–∫–∏ –∑–∞ —Å–º–µ–Ω—É)
    if (hasShiftRate) {
        const shiftBlock = template.ruleBlocks.find(block => block.type === 'shiftRate');
        const hasNightShifts = shiftBlock && shiftBlock.nightRanges && shiftBlock.nightRanges.length > 0;
        
        const shiftGroup = document.createElement('div');
        shiftGroup.className = 'setting-group';
        shiftGroup.innerHTML = `
            <label style="display: flex; align-items: center; gap: 10px;">
                <input type="checkbox" id="day-shift-checkbox" ${dayData.dayShift ? 'checked' : ''}>
                –î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞
            </label>
            ${hasNightShifts ? `
            <label style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
                <input type="checkbox" id="night-shift-checkbox" ${dayData.nightShift ? 'checked' : ''}>
                –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞
            </label>
            ` : ''}
        `;
        dynamicFields.appendChild(shiftGroup);
    }
    
    // –ü–æ–ª—è —á–∞—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫ —Å—Ç–∞–≤–∫–∏ –∑–∞ —á–∞—Å)
    if (hasHourlyRate) {
        const hourlyBlock = template.ruleBlocks.find(block => block.type === 'hourlyRate');
        const hasNightHours = hourlyBlock && hourlyBlock.nightRanges && hourlyBlock.nightRanges.length > 0;
        
        const hoursGroup = document.createElement('div');
        hoursGroup.className = 'setting-group';
        hoursGroup.innerHTML = `
            <label>–î–Ω–µ–≤–Ω—ã–µ —á–∞—Å—ã:</label>
            <input type="number" id="day-hours-input" value="${dayData.dayHours || ''}" min="0" step="0.5">
            ${hasNightHours ? `
            <label style="margin-top: 10px;">–ù–æ—á–Ω—ã–µ —á–∞—Å—ã:</label>
            <input type="number" id="night-hours-input" value="${dayData.nightHours || ''}" min="0" step="0.5">
            ` : ''}
        `;
        dynamicFields.appendChild(hoursGroup);
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!hasSalesPercent && !hasShiftRate && !hasHourlyRate) {
        const message = document.createElement('div');
        message.style.padding = '10px';
        message.style.textAlign = 'center';
        message.style.color = '#666';
        message.textContent = '–î–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫–∏ –ø—Ä–∞–≤–∏–ª –≤ —à–∞–±–ª–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö';
        dynamicFields.appendChild(message);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è
function saveDayData() {
    const comment = document.getElementById('comment-input').value;
    const selectedColor = document.querySelector('.color-option.selected')?.dataset.color;
    
    const dateKey = `${currentYear}-${currentMonth+1}-${selectedDay}`;
    const currentCalendarData = getCurrentCalendarData();
    
    const template = getCurrentTemplate();
    const hasSalesPercent = template.ruleBlocks.some(block => block.type === 'salesPercent');
    const hasShiftRate = template.ruleBlocks.some(block => block.type === 'shiftRate');
    const hasHourlyRate = template.ruleBlocks.some(block => block.type === 'hourlyRate');
    
    const dayData = {
        comment: comment,
        color: selectedColor
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    if (hasSalesPercent) {
        const customPercent = document.getElementById('day-sales-percent')?.value;
        dayData.customSalesPercent = customPercent ? parseFloat(customPercent) : null;
        dayData.sales = parseInt(document.getElementById('sales-input').value) || 0;
    }
    
    if (hasShiftRate) {
        const customRate = document.getElementById('day-shift-rate')?.value;
        dayData.customShiftRate = customRate ? parseInt(customRate) : null;
        dayData.dayShift = document.getElementById('day-shift-checkbox')?.checked || false;
        const nightCheckbox = document.getElementById('night-shift-checkbox');
        if (nightCheckbox) {
            dayData.nightShift = nightCheckbox.checked;
        }
    }
    
    if (hasHourlyRate) {
        const customHourly = document.getElementById('day-hourly-rate')?.value;
        dayData.customHourlyRate = customHourly ? parseFloat(customHourly) : null;
        dayData.dayHours = parseFloat(document.getElementById('day-hours-input').value) || 0;
        const nightHoursInput = document.getElementById('night-hours-input');
        if (nightHoursInput) {
            dayData.nightHours = parseFloat(nightHoursInput.value) || 0;
        }
    }
    
    // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–û–õ–Ø: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–Ω—É—Å –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—á–µ—Ç (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
    const bonusInput = document.getElementById('day-bonus');
    if (bonusInput) {
        dayData.bonus = parseFloat(bonusInput.value) || 0;
    }
    
    const deductionInput = document.getElementById('day-deduction');
    if (deductionInput) {
        dayData.fixedDeduction = parseFloat(deductionInput.value) || 0;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–≤–æ–¥–∫—É
    if (originalFunctionalBorderData) {
        const shouldKeepFunctionalBorder = checkFunctionalBorderPreservation(dayData, originalFunctionalBorderData, template);
        if (shouldKeepFunctionalBorder) {
            dayData.functionalBorder = true;
            dayData.functionalBorderData = {...originalFunctionalBorderData};
        } else {
            dayData.functionalBorder = false;
            dayData.functionalBorderData = undefined;
        }
    }
    
    currentCalendarData[dateKey] = dayData;
    saveToStorage('appSettings', appSettings);
    closeModal();
    generateCalendar();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±–≤–æ–¥–∫–∏
function checkFunctionalBorderPreservation(dayData, originalData, template) {
    const hasSalesPercent = template.ruleBlocks.some(block => block.type === 'salesPercent');
    const hasShiftRate = template.ruleBlocks.some(block => block.type === 'shiftRate');
    const hasHourlyRate = template.ruleBlocks.some(block => block.type === 'hourlyRate');
    
    let isPreserved = true;
    
    if (hasSalesPercent) {
        isPreserved = isPreserved && (dayData.sales === originalData.sales);
    }
    
    if (hasShiftRate) {
        isPreserved = isPreserved && 
            (dayData.dayShift === originalData.dayShift) && 
            (dayData.nightShift === originalData.nightShift);
    }
    
    if (hasHourlyRate) {
        isPreserved = isPreserved && 
            (dayData.dayHours === originalData.dayHours) && 
            (dayData.nightHours === originalData.nightHours);
    }
    
    return isPreserved;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
function initPeriodSelector() {
    const currentYear = new Date().getFullYear();
    const yearOptions = document.getElementById('year-options');
    
    for (let year = 2020; year <= currentYear + 5; year++) {
        const option = document.createElement('div');
        option.className = 'period-option';
        option.textContent = year;
        option.dataset.year = year;
        option.addEventListener('click', () => selectYear(year));
        yearOptions.appendChild(option);
    }
    
    const monthOptions = document.getElementById('month-options');
    const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
      "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
    
    monthNames.forEach((month, index) => {
        const option = document.createElement('div');
        option.className = 'period-option';
        option.textContent = month;
        option.dataset.month = index;
        option.addEventListener('click', () => selectMonth(index));
        monthOptions.appendChild(option);
    });
    
    document.getElementById('period-back').addEventListener('click', () => {
        document.getElementById('month-step').style.display = 'none';
        document.getElementById('year-step').style.display = 'block';
        document.getElementById('period-back').style.display = 'none';
    });
}

// –í—ã–±–æ—Ä –≥–æ–¥–∞
function selectYear(year) {
    currentYear = year;
    document.getElementById('year-step').style.display = 'none';
    document.getElementById('month-step').style.display = 'block';
    document.getElementById('period-back').style.display = 'block';
}

// –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
function selectMonth(month) {
    currentMonth = month;
    closeModal();
    generateCalendar();
}
